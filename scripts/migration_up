#!/bin/bash
# Script to apply up database migrations
# usage: ./migrate_up.sh

# Abort script at first error
set -e

# Base dir (assuming the script is in {PROJECT_FOLDER}/scripts/migration_up)
BASEDIR=$(dirname "$0")

# Set project folder
PROJECT_FOLDER="$BASEDIR/.."

# Path to .env file
ENV_FILE="$PROJECT_FOLDER/.env"

# Check if the .env file exists
if [ ! -f "$ENV_FILE" ]; then
    echo "üö´ .env file not found at $ENV_FILE"
    exit 1
fi

# Load environment variables from .env file
export $(grep -v '^#' "$ENV_FILE" | xargs)

# Ensure all required environment variables are set
if [ -z "$DB_HOST" ] || [ -z "$DB_PORT" ] || [ -z "$DB_USER" ] || [ -z "$DB_NAME" ] || [ -z "$DB_PASSWORD" ]; then
    echo "üö´ Missing one or more required environment variables (DB_HOST, DB_PORT, DB_USER, DB_NAME, DB_PASSWORD)"
    exit 1
fi

# Construct the DATABASE_URL
DATABASE_URL="postgres://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/$DB_NAME?sslmode=disable"

# Check if the migrate tool is installed, if not, install it
if ! command -v migrate >/dev/null; then
    echo "üõ† 'migrate' is not installed. Installing it now..."
    brew install golang-migrate
fi

# Set migration directory
MIGRATION_PATH="$PROJECT_FOLDER/db/migrations"

# Apply migrations up
echo "‚¨ÜÔ∏è Applying migrations up..."
migrate -path "$MIGRATION_PATH" -database "$DATABASE_URL" up

echo "‚úÖ Migrations applied successfully."
